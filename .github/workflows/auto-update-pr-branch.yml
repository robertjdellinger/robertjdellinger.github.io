name: Auto-update PR branch

on:
  pull_request_target:
    types: [opened, reopened, synchronize, ready_for_review, labeled]

permissions:
  pull-requests: write

concurrency:
  group: autoupdate-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  update:
    timeout-minutes: 5
    if: >
      (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'netlify') &&
      github.event.pull_request.head.repo.full_name == github.repository &&
      github.event.pull_request.draft == false &&
      github.event.pull_request.user.login != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Log context
        uses: actions/github-script@v7
        with:
          script: |
            core.info(`Run sha: ${context.sha}`);
            core.info(`PR: #${context.payload.pull_request.number}`);
            core.info(`Base: ${context.payload.pull_request.base.ref}`);
            core.info(`Head: ${context.payload.pull_request.head.ref}`);
            core.info(`Author: ${context.payload.pull_request.user.login}`);

      - name: Compare base vs PR branch
        id: compare
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const base = context.payload.pull_request.base.ref;
            const head = context.payload.pull_request.head.ref;

            core.info(`Comparing base (${base}) ... head (${head})`);

            const comparison = await github.rest.repos.compareCommits({
              owner,
              repo,
              base,
              head
            });

            const behindBy = comparison.data.behind_by ?? 0;
            const aheadBy = comparison.data.ahead_by ?? 0;
            const status = comparison.data.status ?? 'unknown';

            core.info(`compare status: ${status}`);
            core.info(`base (${base}) is ahead of head by: ${behindBy} commits`);
            core.info(`head (${head}) is ahead of base by: ${aheadBy} commits`);

            // Set step outputs so later steps can use them
            core.setOutput('behind_by', String(behindBy));
            core.setOutput('ahead_by', String(aheadBy));
            core.setOutput('status', status);

      - name: Update branch from base (only if base has new commits)
        if: steps.compare.outputs.behind_by != '0'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              core.info('Attempting to update PR branch from base...');
              const res = await github.rest.pulls.updateBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              core.info(`updateBranch response status: ${res.status}`);
              core.info('Successfully queued branch update.');
            } catch (err) {
              const msg = err && err.message ? String(err.message) : String(err);
              const status = err && err.status ? String(err.status) : 'unknown';
              core.warning(`updateBranch failed (status ${status}): ${msg}`);

              // Handle common, non-fatal cases gracefully
              const benign =
                msg.includes('There are no new commits on the base branch') ||
                msg.toLowerCase().includes('merge conflict') ||
                msg.includes('Resource not accessible by integration') ||
                status === '422' || status === '403';

              if (benign) {
                core.info('No update performed (no-op, merge conflict, or permission restriction). Skipping without failing the job.');
                core.setOutput('skipped', 'true');
                core.setOutput('reason', msg);
                return;
              }

              // Re-throw unexpected errors so they surface.
              throw err;
            }

      - name: Skip update message
        if: steps.compare.outputs.behind_by == '0'
        run: |
          echo "No update required: base branch does not have commits newer than the PR branch."
